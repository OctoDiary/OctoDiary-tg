from datetime import date, timedelta

from aiogram import F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, ChosenInlineResult, InlineQuery, Message, ReplyKeyboardRemove
from database import User
from octodiary.exceptions import APIError
from octodiary.types.myschool.mobile import ShortHomeworks
from utils import keyboard

from .router import APIs, MySchool, MySchoolUser, router


class HomeworksState(StatesGroup):
    type = State()

def homeworks_info(homeworks: ShortHomeworks):
    days = {}
    for homework in homeworks.payload:
        if (date_str := homework.date.strftime("%d.%m")) not in days:
            days[date_str] = {}
        
        if homework.subject_name not in days[date_str]:
            days[date_str][homework.subject_name] = []
        
        days[date_str][homework.subject_name] += [f"<code>{homework.description}</code>"]
    
    return {
        date_str: f"üìù <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ {date_str}:</b>\n\n" + "\n".join([
            f"‚Ä¢ <b>{subject}</b>"
            + (
                ("\n   ‚îú " if len(homeworks) > 1 else "")
                + "\n   ‚îú ".join(homeworks[:-1])
                + f"\n   ‚îî {homeworks[-1]}"
            )
            for subject, homeworks in subjects.items()
        ])
        for date_str, subjects in days.items()
    }


@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    Command("homeworks")
)
@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    F.text == "–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
    F.chat.type == ChatType.PRIVATE
)
async def homeworks(message: Message, apis: APIs, user: User, state: FSMContext):
    """–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–î–ó)"""

    await state.set_state(HomeworksState.type)
    await message.answer(
        "‚ùî –ö–∞–∫–∏–µ <b>–î–ó</b> –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>?",
        reply_markup=keyboard.HOMEWORKS_TYPE
    )


@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    HomeworksState.type,
)
async def get_homeworks(message: Message, apis: APIs, user: User, state: FSMContext):
    """–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–î–ó)"""

    await state.clear()
    upcoming = message.text == "–ë–ª–∏–∂–∞–π—à–∏–µ"

    try:
        homeworks = await apis.mobile.get_homeworks_short(
            student_id=user.db_profile["children"][0]["id"],
            profile_id=user.db_profile_id,
            from_date=date(2023, 9, 1) if not upcoming else date.today(),
            to_date=(date.today() + timedelta(days=7)) if upcoming else date.today() - timedelta(days=1)
        )
    except APIError as e:
        return await message.answer(f"‚ùï [<code>{e.status_code}</code>] –°–µ—Ä–≤–µ—Ä <b>–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª</b> –Ω–∞ –∑–∞–ø—Ä–æ—Å, <b>–æ—à–∏–±–∫–∞</b>...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")
    
    
    await message.bot.inline.list(
        update=message,
        strings=homeworks_info(homeworks),
    )
    await (await message.answer("...", reply_markup=keyboard.DEFAULT)).delete()