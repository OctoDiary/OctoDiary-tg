from datetime import date, datetime, timedelta
from aiogram import F
from aiogram.enums import ChatType
from aiogram.filters import Command, CommandObject
from aiogram.types import CallbackQuery, ChosenInlineResult, InlineQuery, Message
from database import User
from octodiary.exceptions import APIError
from octodiary.types.myschool.mobile import EventsResponse
from octodiary.types.myschool.mobile.lesson_schedule_items import (
    LessonHomework,
    LessonScheduleItems,
    Mark,
)
from utils.other import pluralization_string

from .router import APIs, MySchool, MySchoolUser, router


def day_schedule_info(evets: EventsResponse, from_db):
    days_lessons = {}
    def weekday(x):
        return {0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–≤—Ç–æ—Ä–Ω–∏–∫", 2: "—Å—Ä–µ–¥—É", 3: "—á–µ—Ç–≤–µ—Ä–≥", 4: "–ø—è—Ç–Ω–∏—Ü—É", 5: "—Å—É–±–±–æ—Ç—É", 6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}[int(x)]
    
    for event in evets.response:
        if event.lesson_type != "NORMAL":
            continue
        
        start = datetime.strptime(event.start_at, "%Y-%m-%dT%H:%M:%S%z")
        end = datetime.strptime(event.finish_at, "%Y-%m-%dT%H:%M:%S%z")
        
        date = start.date()
        date_str = f"{date.day:02}.{date.month:02}/{date.weekday()}"

        if date_str not in days_lessons:
            days_lessons[date_str] = []

        homeworks = [
            homework.replace("\n", "</code>; <code>")
            for homework in event.homework.descriptions
        ] if event.homework and event.homework.descriptions else []

        days_lessons[date_str].append(
            (
                f"‚Ä¢ <b>{event.subject_name}</b>  "
                f"[<code>{start.hour:02}:{start.minute:02}-{end.hour:02}:{end.minute:02}</code>]    "
                f"[<b>ID</b>: <code>{event.id}</code>]"
            )
            + (f"\n  {'‚îú' if event.cancelled or homeworks or event.marks else '‚îî'} <b>–ó–∞–º–µ–Ω–∞</b>: ‚úÖ" if event.replaced else '')
            + (f"\n  {'‚îú' if homeworks or event.marks else '‚îî'} <b>–û—Ç–º–µ–Ω–∞</b>: ‚úÖ" if event.cancelled else '')
            + (
                (
                    f"\n  {'‚îú' if homeworks else '‚îî'} <b>–û—Ü–µ–Ω–∫–∏</b>: " + " | ".join([f"<code>{mark.value}</code> [<code>{mark.weight}</code>]" for mark in event.marks])
                ) if event.marks else ""
            )
            + (
                (
                    (
                        (
                            "\n  ‚îú <b>–î–ó</b>: <code>"
                            + "</code>\n  ‚îú <b>–î–ó</b>: <code>".join(homeworks[:-1])
                            + "</code>"
                        ) if len(homeworks) > 1 else ""
                    )
                    + f"\n  ‚îî <b>–î–ó</b>: <code>{homeworks[-1]}</code>"
                ) if homeworks else ""
            )
        )
    
    return {
        date_str.split("/")[0]: f"""
üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weekday(date_str.split("/")[1])}</b> [<code>{date_str.split("/")[0]}</code>]
{from_db}
""" + "\n".join(lessons) + """

<b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> –æ–± —É—Ä–æ–∫–µ: <code>/lesson ID</code>
"""
        for date_str, lessons in days_lessons.items()
    }

def mark_info(mark: Mark) -> str:
    return f"""‚îå <b>–û—Ü–µ–Ω–∫–∞</b>: <code>{mark.value}</code>
‚îú <b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã</b>: <code>{mark.control_form_name}</code>
‚îú <b>–í–µ—Å:</b> <code>{pluralization_string(mark.weight, ['–±–∞–ª–ª', '–±–∞–ª–ª–∞', '–±–∞–ª–ª–æ–≤'])}</code>
‚îú <b>–í—Ä–µ–º—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è</b>: <code>{mark.updated_at.strftime("%d.%m.%Y %H:%M")}</code>
‚îî <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: <code>{mark.comment or "‚ùå"}</code>"""

def homework_info(homework: LessonHomework) -> str:
    files = [
        f"<a href='{file.link}'>{file.title}</a>"
        for material in homework.materials
        for file in material.items
    ] if homework.materials else []

    return f"""‚îå <b>–ó–∞–¥–∞–Ω–∏–µ</b>: <code>{homework.homework}</code>
‚îî <b>–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {'‚úÖ' if files else '‚ùå'}</b>""" + (
        (
            ("\n   ‚îú " if len(files) > 1 else "")
            + "\n   ‚îú ".join(files[:-1])
            + f"\n   ‚îî {files[-1]}"
        ) if files else ""
    )


def lesson_info(lesson: LessonScheduleItems) -> str:
    return f"""
<b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> –æ–± —É—Ä–æ–∫–µ: <code>{lesson.id}</code>

‚Ä¢ <b>–ü—Ä–µ–¥–º–µ—Ç</b>: <code>{lesson.subject_name}</code>
‚Ä¢ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>: <code>{lesson.teacher.last_name} {lesson.teacher.first_name} {lesson.teacher.middle_name}</code>
‚Ä¢ <b>–í—Ä–µ–º—è</b>: <code>{lesson.begin_time} - {lesson.end_time}</code>
‚Ä¢ <b>–î–∞—Ç–∞</b>: <code>{lesson.date}</code>
‚Ä¢ <b>–ö–∞–±–∏–Ω–µ—Ç</b>: <code>{lesson.room_number}</code>""" + (
        (
            "\n\n[ <b>–û—Ü–µ–Ω–∫–∏</b> ]\n"
            + (
                "\n".join([mark_info(mark) for mark in lesson.marks])
            )
        ) if lesson.marks else ""
    ) + (
        (
            "\n\n[ <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</b> ]\n"
            + (
                "\n".join([homework_info(homework) for homework in lesson.lesson_homeworks])
            )
        ) if lesson.lesson_homeworks else ""
    )


@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    Command("schedule")
)
@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    F.chat.type == ChatType.PRIVATE
)
async def schedule(message: Message, apis: APIs, user: User):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""

    from_db = ""
    try:
        today = date.today()
        events = await apis.mobile.get_events(
            person_id=user.db_profile["children"][0]["contingent_guid"],
            mes_role=user.db_profile["profile"]["type"],
            begin_date=(
                today - timedelta(days= -1*(0 - today.weekday()))
            ),
            end_date=(
                today + timedelta(days= 7+(6 - today.weekday()))
            )
        )
    except APIError:
        events = user.db_events
        from_db = "<tg-spoiler>‚ùï –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</tg-spoiler>\n"

    strings = day_schedule_info(events, from_db)
    await message.bot.inline.list(
        message, strings, row_width=5,
    )


@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    Command("lesson")
)
async def get_lesson_info(message: Message, apis: APIs, user: User, command: CommandObject):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ"""
    try:
        lesson = await apis.mobile.get_lesson_schedule_items(
            profile_id=user.db_profile_id,
            student_id=user.db_profile["children"][0]["id"],
            lesson_id=command.args.strip()
        )
    except APIError as e:
        return await message.answer(f"‚ùï [<code>{e.status_code}</code>] –°–µ—Ä–≤–µ—Ä <b>–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª</b> –Ω–∞ –∑–∞–ø—Ä–æ—Å, <b>–æ—à–∏–±–∫–∞</b>...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")
    
    return await message.answer(
        lesson_info(lesson)
    )
