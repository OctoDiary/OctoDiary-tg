from aiogram import F, Router
from aiogram.enums import ChatType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
)
from database import Database
from git import Repo
from octodiary.asyncApi.myschool import AsyncMobileAPI
from octodiary.exceptions import APIError
from utils.keyboard import ABOUT, AUTH_LOGIN_TYPE, AUTH_SYSTEMS, DEFAULT, YES_OR_NO

router = Router(name="Start")


def get_hash():
    try:
        hash_ = Repo().head.commit.hexsha
        return f'<a href="https://github.com/OctoDiary/OctoDiary-tg/commit/{hash_}">#{hash_[:7]}</a>'
    except Exception:
        return "<a href='https://github.com/OctoDiary/OctoDiary-tg'>#last-commit</a>"



@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"""
üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!

ü§ñ –Ø - –±–æ—Ç <b>OctoDiary</b>!
–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ <b>–æ–±—à–∏—Ä–Ω—ã–µ</b>:
‚Ä¢ –ü–æ–∫–∞–∂—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ü–µ–Ω–∫–∏, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è <b>–ø–æ–¥—Ä–æ–±–Ω–æ</b>
‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> —Å–∏—Å—Ç–µ–º—ã <a href="https://myschool.mosreg.ru/"><b>–ú–æ—è –®–∫–æ–ª–∞</b></a> <tg-spoiler>(</tg-spoiler><a href="https://school.mos.ru/"><tg-spoiler><b>–ú–≠–®</b></tg-spoiler></a><tg-spoiler> - —Å–∫–æ—Ä–æ...)</tg-spoiler>
‚Ä¢ <b>–£–≤–µ–¥–æ–º–ª—é</b> –æ –Ω–æ–≤–æ–º –î–ó, –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ —Ç.–¥.
–ò —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë! 

üòº –ù—É —á—Ç–æ –∂–µ, <b>–¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º</b>! –í–≤–æ–¥–∏ <b>–∫–æ–º–∞–Ω–¥—É</b> /auth –∏–ª–∏ /login, —á—Ç–æ–±—ã <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</b>!
        """,
        reply_markup=DEFAULT if message.chat.type == ChatType.PRIVATE and Database().user(message.from_user.id).token else None
    )


@router.message(F.text == "–û –ø—Ä–æ–µ–∫—Ç–µ")
async def about(message: Message):
    await message.answer(
        f"""
[<a href='https://github.com/OctoDiary/'><b>OctoDiary</b></a>]
–ü—Ä–æ–µ–∫—Ç ¬´<a href='https://github.com/OctoDiary/'><b>OctoDiary</b></a>¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –¥–≤—É–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏:
‚Ä¢ <a href='https://github.com/Den4ikSuperOstryyPer4ik'><b>Den4ikSuperOstryyPer4ik</b></a>
‚Ä¢ <a href='https://github.com/bxkr'><b>bxkr</b></a>
–í–µ—Å—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: <a href='https://github.com/OctoDiary/OctoDiary-tg'><b>OctoDiary-tg</b></a> | <a href='https://github.com/OctoDiary/OctoDiary-py'><b>OctoDiary-py</b></a>
–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: {get_hash()}

[<a href='https://myschool.mosreg.ru/'><b>–ú–æ—è –®–∫–æ–ª–∞</b></a>]
–ü—Ä–æ–µ–∫—Ç ¬´<a href='https://myschool.mosreg.ru/'><b>–ú–æ—è –®–∫–æ–ª–∞</b></a>¬ª —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –ú–æ—Å–∫–≤—ã, –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —Å–≤—è–∑–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –ø—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.
        """,
        reply_markup=ABOUT,
        disable_web_page_preview=True
    )


auth_router = Router()

class Form(StatesGroup):
    system = State()
    login_type = State()
    username = State()
    password = State()
    gosuslugi_mfa = State()
    token = State()
    confirm = State()


@auth_router.message(Command(commands=["auth", "login"]))
async def auth(message: Message, state: FSMContext):
    if Database().user(message.from_user.id).token:
        await message.answer("üö´ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    await state.set_state(Form.system)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:", reply_markup=AUTH_SYSTEMS, resize_keyboard=True)


@auth_router.message(Form.system)
async def set_system(message: Message, state: FSMContext):
    await state.update_data(system="myschool" if message.text == "–ú–æ—è –®–∫–æ–ª–∞" else "mesh")
    if message.text == "–ú–≠–®":
        await state.clear()
        await message.answer(
            "–î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è <b>–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>. <i><tg-spoiler>–°–∫–æ—Ä–æ...</tg-spoiler></i>",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    await state.set_state(Form.login_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–∏–Ω–∞:",
        reply_markup=AUTH_LOGIN_TYPE
    )


@auth_router.message(Form.login_type)
async def set_login_type(message: Message, state: FSMContext):
    match message.text:
        case "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å":
            await state.clear()
            await message.answer(
                "–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è <b>–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>. <i><tg-spoiler>–°–∫–æ—Ä–æ...</tg-spoiler></i>",
                reply_markup=ReplyKeyboardRemove()
            )
        case "–ì–æ—Å—É—Å–ª—É–≥–∏":
            await state.set_state(Form.username)
            await message.answer(
                f"""
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ</b>!
–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å</b> –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>–ì–æ—Å—É—Å–ª—É–≥</b>.

üîí –ú—ã <b>–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º</b> –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω</b>, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ <b>–í–∞–º</b>. 
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ <b>—Ç–µ–∫—É—â–µ–π</b> –≤–µ—Ä—Å–∏–∏: {get_hash()}

‚öô <b>–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø</b> –≤ –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å –º–æ–∂–Ω–æ –Ω–∞ https://lk.gosuslugi.ru/settings/safety/events

üîí –í–≤–µ–¥–∏—Ç–µ <b>–ª–æ–≥–∏–Ω</b>:
                """,
                disable_web_page_preview=True,
                reply_markup=ReplyKeyboardRemove()
            )
        case "AUPD-TOKEN":
            await state.set_state(Form.token)
            await message.answer(
                "üîí –í–≤–µ–¥–∏—Ç–µ <b>API-Auth <tg-spoiler>(aupd)</tg-spoiler> —Ç–æ–∫–µ–Ω</b>:",
                reply_markup=ReplyKeyboardRemove(),
            )


async def check_token_send_confirm(message: Message, token: str, state: FSMContext):
    api = AsyncMobileAPI(token=token)
    try:
        user_api = await api.get_users_profile_info()
        profile_id = user_api[0].id
        profile = (await api.get_profile(profile_id)).profile

        if profile.type == "student":
            type = "—É—á–µ–Ω–∏–∫"
        elif profile.type == "parent":
            type = "—Ä–æ–¥–∏—Ç–µ–ª—å"
        else:
            await state.clear()
            await message.answer(
                "‚ùî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞."
            )
            return

        await state.update_data(
            token=token,
            api=api,
            users_profile_info=user_api,
            profile_id=profile_id,
            profile=profile
        )

        # user.db_users_profile_info = [prof.model_dump() for prof in user_api]

        await state.set_state(Form.confirm)
        await message.answer(
            (
                f"<b>{profile.last_name} {profile.first_name} {profile.middle_name}, {type}</b>, –≤–µ—Ä–Ω–æ?"
            ),
            reply_markup=YES_OR_NO
        )
    except APIError as e:
        await state.clear()
        await message.answer(
            f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ."
        )


@auth_router.message(Form.token)
async def set_token(message: Message, state: FSMContext):
    token = message.text
    await check_token_send_confirm(message, token, state)


@auth_router.message(Form.username)
async def set_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text)
    await state.set_state(Form.password)
    await message.answer(
        f"""
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ</b>!
–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å</b> –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>–ì–æ—Å—É—Å–ª—É–≥</b>.

üîí –ú—ã <b>–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º</b> –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω</b>, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ <b>–í–∞–º</b>. 
–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ <b>—Ç–µ–∫—É—â–µ–π</b> –≤–µ—Ä—Å–∏–∏: {get_hash()}

‚öô <b>–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø</b> –≤ –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å –º–æ–∂–Ω–æ –Ω–∞ https://lk.gosuslugi.ru/settings/safety/events

üîí –í–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b>:
        """,
        disable_web_page_preview=True
    )


@auth_router.message(Form.password)
async def set_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    data = await state.get_data()

    api = AsyncMobileAPI()
    try:
        token = await api.esia_login(username=data["username"], password=data["password"])
    except APIError as e:
        if e.error_type == "INVALID_PASSWORD":
            await state.update_data(username=None, password=None)
            await state.set_state(Form.username)
            await message.answer(
                "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å...\nüîí –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω:"
            )
        else:
            await state.clear()
            await message.answer(
                f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–¥–Ω–µ–µ."
            )
    else:
        if token is False:
            await state.update_data(api=api)
            await state.set_state(Form.gosuslugi_mfa)
            await message.answer(
                "üîê –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ MFA (SMS/TOTP –∫–æ–¥):"
            )
        else:
            await check_token_send_confirm(message, token, state)
            

@auth_router.message(Form.confirm)
async def set_confirm(message: Message, state: FSMContext):
    match message.text:
        case "–ù–µ—Ç":
            await state.clear()
            await message.answer(
                "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=ReplyKeyboardRemove()
            )
        case "–î–∞":
            data = await state.get_data()
            user = Database().user(message.from_user.id)
            user.db_users_profile_info = [prof.model_dump() for prof in data["users_profile_info"]]
            user.db_profile_id = data["profile_id"]
            user.db_token = data["token"]
            user.db_system = data["system"]
            user.db_settings = {
                "goals": False,
                "notifications": {
                    "create_mark": True
                }
            }
            user.db_skip_notifications = True
            user.db_notified_ids = []

            await state.clear()

            await message.answer(
                """
‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ</b>!\n–ù—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –≤–∞–º —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ü–µ–Ω–∫–∏, –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã–π—Ç–∏: /logout
                """,
                reply_markup=DEFAULT if message.chat.type == ChatType.PRIVATE else None
            )


@auth_router.message(Form.gosuslugi_mfa)
async def set_gosuslugi_mfa(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ MFA (SMS/TOTP –∫–æ–¥):"
        )
        return
    
    data = await state.get_data()
    try:
        api: AsyncMobileAPI = data["api"]
        token = await api.esia_enter_MFA(code=int(message.text))
    except APIError as e:
        await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    else:
        await check_token_send_confirm(message, token, state)
