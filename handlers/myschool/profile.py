from .router import router, MySchool, APIs, MySchoolUser
from aiogram.types import Message, CallbackQuery, InlineQuery, ChosenInlineResult
from aiogram import F
from aiogram.filters import Command
from aiogram.enums import ChatType
from octodiary.exceptions import APIError
from octodiary.types.myschool.mobile.family_profile import FamilyProfile, Child
from database import User, Database


def child_profile_info(child: Child) -> str:
    return f"""
‚îå üë§ <b>{child.last_name} {child.first_name} {child.middle_name}</b>
‚îú üìû <code>{child.phone or '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</code>
‚îú üìÜ <code>{child.birth_date}</code>
‚îî üìß <code>{child.email}</code>
"""

def profile_info(profile: FamilyProfile, from_db: str) -> str:
    TEXT = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>
{from_db}<b>{profile.profile.first_name} {profile.profile.last_name}</b> [<b>{'–†–æ–¥–∏—Ç–µ–ª—å' if profile.profile.type == 'parent' else '–£—á–µ–Ω–∏–∫'}</b>]

[<b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b> | <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>]
‚îå üë§ <b>{profile.profile.last_name} {profile.profile.first_name} {profile.profile.middle_name}</b>
‚îú üìû <code>{profile.profile.phone or '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</code>
‚îú üìÜ <code>{profile.profile.birth_date or '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</code>
‚îî üìß <code>{profile.profile.email or '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</code>
"""
    if profile.profile.type == "parent":
        TEXT += "\n[<b>–î–µ—Ç–∏</b> | <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>]"
        TEXT += "\n".join([child_profile_info(child) for child in profile.children])
    
    TEXT += "\n‚ÑπÔ∏è –ß—Ç–æ–±—ã <b>–≤—ã–π—Ç–∏</b>, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É - /logout"
    return TEXT


@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    Command("profile")
)
@router.message(
    F.func(MySchoolUser).as_("user"),
    F.func(MySchool).as_("apis"),
    F.text == "–ü—Ä–æ—Ñ–∏–ª—å",
    F.chat.type == ChatType.PRIVATE
)
async def profile(update: Message | CallbackQuery, apis: APIs, user: User):
    """–ü—Ä–æ—Ñ–∏–ª—å"""

    from_db = ''
    try:
        profile = await apis.mobile.get_profile(user.db_profile_id)
    except APIError:
        profile = FamilyProfile.model_validate(user.db_profile)
        from_db = "<tg-spoiler>‚ùï –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</tg-spoiler>\n"
    
    await update.answer(text=profile_info(profile, from_db))


@router.message(
    F.func(MySchoolUser).as_("user"),
    Command("logout")
)
async def logout_command(message: Message, user: User):
    """–í—ã—Ö–æ–¥"""
    await message.bot.inline.answer(
        update=message,
        response="‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ <b>–≤—ã–π—Ç–∏</b>?",
        reply_markup=[
            {
                "text": "‚úÖ",
                "callback": logout,
                "args": (user,)
            },
            {
                "text": "‚ùå",
                "callback": cancel
            }
        ]
    )


async def logout(call: CallbackQuery, user: User):
    if call.from_user.id != int(user.__id):
        await call.answer("–≠—Ç–æ –Ω–µ –¥–ª—è —Ç–µ–±—è!", show_alert=True)
        return

    await call.answer("–í—ã—Ö–æ–¥...")
    await call.message.answer("‚úÖ –í—ã <b>–≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞</b>.\n")
    Database().pop(str(call.from_user.id))


async def cancel(call: CallbackQuery):
    await call.message.delete()
    await call.answer("–û—Ç–º–µ–Ω–∞...")
